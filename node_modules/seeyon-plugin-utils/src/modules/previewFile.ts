/*
 * @Author: XunL
 * @Description:
 */

import { encode } from "js-base64";

export type MARK_TYPE = "FILEID" | "CDNURL" | "FSSURL" | "FSSID";

export const previewFile = async function(
  fileMark: string,
  axiosInstance: any,
  host = "",
  api = {
    FILEID: "/fssapi/v1/3rd/preview/",
    CDNURL: "/fssapi/v1/3rd/previewByCdn",
    FSSURL: "/fssapi/v1/3rd/previewByFssUrl",
    FSSID: "/fssapi/v1/3rd/previewByFssId",
  },
  autoOpen = true
) {
  let type: MARK_TYPE = "FILEID";
  let key = "";
  let useApi = "";
  if (/[^\d]/.test(fileMark)) {
    type = "FSSID";
    key = "fssId";
  }

  if (!fileMark) {
    console.warn("预览文件ID不能为空");
    throw new Error("请传入文件ID");
    return false;
  }
  if (!axiosInstance) {
    console.warn("axiosInstance不能为空");
    throw new Error("请传入请求方法");
    return false;
  }
  // 判断查询是ID or CDNURL or FSSURL
  if (fileMark.startsWith("http")) {
    if (fileMark.indexOf("asset") > -1) {
      type = "CDNURL";
      key = "cdnUrl";
    } else {
      type = "FSSURL";
      key = "fssUrl";
    }
    //fileMark = encodeURIComponent(fileMark);
  }
  let useAPI = api[type];
  if (type === "FILEID") {
    useApi = `${host}${useAPI}${fileMark}`;
  } else {
    useApi = `${host}${useAPI}`;
  }
  let { previewUrl, data } = (await axiosInstance.get(useApi, {
    params: {
      [key]: encode(fileMark),
    },
  })) as {
    previewUrl: string;
    data: any;
  };
  while (!previewUrl) {
    previewUrl = data.previewUrl;
    data = data.data;
  }
  previewUrl = previewUrl;
  console.log(previewUrl);
  if (autoOpen) {
    window.open(previewUrl);
  }
  return previewUrl;
};

export const previewFileWxApp = async function(
  fileMark: string,
  request: any,
  host = "",
  api = {
    FILEID: "/fssapi/v1/3rd/preview/",
    CDNURL: "/fssapi/v1/3rd/previewByCdn",
    FSSURL: "/fssapi/v1/3rd/previewByFssUrl",
    FSSID: "/fssapi/v1/3rd/previewByFssId",
  }
) {
  let type: MARK_TYPE = "FILEID";
  let key = "";
  if (/[^\d]/.test(fileMark)) {
    type = "FSSID";
    key = "fssId";
  }

  if (!fileMark) {
    console.warn("预览文件ID不能为空");
    throw new Error("请传入文件ID");
    return false;
  }
  if (!request) {
    console.warn("request不能为空");
    throw new Error("请传入请求方法");
    return false;
  }
  // 判断查询是ID or CDNURL or FSSURL
  if (fileMark.startsWith("http")) {
    if (fileMark.indexOf("asset") > -1) {
      type = "CDNURL";
      key = "cdnUrl";
    } else {
      type = "FSSURL";
      key = "fssUrl";
    }
    //fileMark = encodeURIComponent(fileMark);
  }
  let useAPI = api[type];
  if (type === "FILEID") {
    useAPI = useAPI + fileMark;
  }

  const { previewUrl } = await request({
    url: useAPI,
    host: "",
    data: {
      [key]: encode(fileMark),
    },
    params: {
      method: "get",
    },
  });
  return previewUrl;
};
